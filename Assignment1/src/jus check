import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;

public class DirWalker2 {
	static int skippedCount = 0;
	static int validRows = 0;

	public void walk(String path, CSVPrinter pw) throws FileNotFoundException {

		File root = new File(path);
		DirWalker2 fw = new DirWalker2();
		File[] list = root.listFiles();
		Reader in;
		StringBuilder sb = new StringBuilder();
//		PrintWriter pw = new PrintWriter(new File("output.csv"));

		if (list == null)
			return;

		for (File f : list) {
			if (f.isDirectory()) {
				walk(f.getAbsolutePath(), pw);
				Logger.getAnonymousLogger().log(Level.INFO, "Dir:" + f.getAbsoluteFile());
			} else if (f.getPath().toString().endsWith(".csv")) {
				try {

					in = new FileReader(f.getPath().toString());
					String[] datePath = f.getPath().toString().split(File.separator + File.separator);
					String date = (datePath[datePath.length - 4]) + "/"
							+ (datePath[datePath.length - 3].length() > 1 ? datePath[datePath.length - 3]
									: "0" + datePath[datePath.length - 3])
							+ "/" + (datePath[datePath.length - 2].length() > 1 ? datePath[datePath.length - 2]
									: "0" + datePath[datePath.length - 2]);
					Iterable<CSVRecord> records = CSVFormat.EXCEL.parse(in);
					for (CSVRecord record : records) {
						if (record.getRecordNumber() == 1)
							continue;
						sb.setLength(0);
						String firstName = record.get(0);
						String lastName = record.get(1);
						String streetNumber = record.get(2);
						String street = record.get(3);
						String city = record.get(4);
						String province = record.get(5);
						String postalCode = record.get(6);
						String country = record.get(7);
						String phoneNumber = record.get(8);
						String emailAddress = record.get(9);
						String[] data = new String[] { firstName, lastName, streetNumber, street, city, province,
								postalCode, country, phoneNumber, emailAddress, date };
						pw.printRecord(data);
						validRows++;
//						}

					}

				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					Logger.getAnonymousLogger().log(Level.SEVERE, e.getLocalizedMessage().toString());
					e.printStackTrace();
					skippedCount++;
				} catch (IOException e) {
					skippedCount++;
					Logger.getAnonymousLogger().log(Level.SEVERE, e.getLocalizedMessage().toString());
					e.printStackTrace();
				} catch (ArrayIndexOutOfBoundsException e) {
					skippedCount++;
					Logger.getAnonymousLogger().log(Level.SEVERE, e.getLocalizedMessage().toString());
					e.printStackTrace();
				} catch (Exception e) {
					skippedCount++;
					Logger.getAnonymousLogger().log(Level.SEVERE, e.getLocalizedMessage().toString());
					e.printStackTrace();
				}
			} else {
//                System.out.println( "File:" + f.getAbsoluteFile() );
			}

		}
	}

	public static void main(String[] args) throws IOException {
		DirWalker2 fw = new DirWalker2();
		final long startTime = System.currentTimeMillis();
		BufferedWriter writer = Files.newBufferedWriter(Paths.get("output.csv"));

		CSVPrinter csvPrinter = new CSVPrinter(writer,
				CSVFormat.DEFAULT.withHeader("First Name", "Last Name", "Street Number", "Street", "City", "Province",
						"Postal Code", "Country", "Phone Number", "Email Address", "Date"));
		fw.walk("C:\\Users\\naras\\OneDrive\\Documents\\Sample Data", csvPrinter);
		csvPrinter.close();
		final long endTime = System.currentTimeMillis();
		System.out.println("Total execution time: " + (endTime - startTime) + " ms");
		System.out.println("skippedCount= " + skippedCount + "\nvalidRows= " + validRows);
	}

}